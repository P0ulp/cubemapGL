uniform mat4 transform;uniform mat4 modelview;uniform mat3 normalMatrix;uniform mat4 matCam;attribute vec4 position;attribute vec3 normal;varying vec3 reflectDir;varying vec3 refractDir;varying float ratio;const float eta = 0.66; // Ratio of indices of refractionconst float fresnelPower = 5.0;const float f = ((1.0-eta) * (1.0-eta)) / ((1.0+eta) * (1.0+eta));void main() {  vec3 eyeNormal =  normalMatrix * normal;   vec4 vertexPos = modelview * position;   ratio = f + (1.0 - f) * pow((1.0 - dot(-normalize(vertexPos.xyz), normalize(eyeNormal))), fresnelPower);  reflectDir = reflect(normalize(vertexPos.xyz), normalize(eyeNormal));  refractDir = refract(normalize(vertexPos.xyz), normalize(eyeNormal), eta);  vec4 ref = matCam * vec4(reflectDir,0);  vec4 refa = matCam * vec4(refractDir,0);  reflectDir = ref.xyz;  refractDir = refa.xyz;  gl_Position = transform * position;}